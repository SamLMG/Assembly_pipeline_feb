import os
import pandas as pd

configfile: "data/config.yaml"
sample_data = pd.read_table(config["samples"], sep="\t").set_index("ID", drop=False)
#print(sample_data)
#print(sample_data.index.values.tolist())


IDS = sample_data.index.values.tolist()
def get_accession(wildcards):
	return sample_data.loc[(wildcards.id), ["SRA"]].dropna().values[0]

#dic = {'id': [], 'seed': []}

#unitdict = {}
#for id in set(sample_data.index.values.tolist()):
#    seed = str(sample_data.loc[id, ["seed"]].values[0])
##    dic["id"].append(str(id))
##    dic["seed"].append(str(seed))
#    if not id in unitdict:
#        unitdict[id] = [str(seed)]
#    else:
#        unitdict[id].append(str(seed))

#print(unitdict)

#seed = sample_data.index.values.tolist()
def get_seed(wildcards):
        return sample_data.loc[(wildcards.id), ["seed"]].dropna().values[0]

def get_clade(wildcards):
        return sample_data.loc[(wildcards.id), ["Clade"]].dropna().values[0]

def get_code(wildcards):
        return sample_data.loc[(wildcards.id), ["Code"]].dropna().values[0]

#IDS = ["SRR12836360"]
Assembler = ["norgal", "MitoFlex", "GetOrganelle", "Novoplasty", "MITObim"]
sub = [10000000, 20000000]
#seed = ["seeds/D.ananassae_coxI.fasta"]

localrules: all, setup_mitoflex_db, NOVOconfig, quast

rule all:
    input:
        expand("QUAST/report.tsv", sub=sub, id=id)
    threads: 1

rule fastqdump:
    params:
        accession = get_accession
    output:
        f = "raw_mt_reads/{id}_1.fastq.gz",
        r = "raw_mt_reads/{id}_2.fastq.gz"
    resources:
        qos="normal_0064",
        partition="mem_0064",
        mem="10G",
        name="fastq-dump",
        nnode="-N 1"
    threads: 2 
    conda:
        "envs/sra-tools.yml"
    shadow: "minimal"
    shell:
        """
        prefetch --max-size 1024000000 {params.accession}
        fastq-dump --split-files --gzip --defline-seq '@$ac-$sn/$ri' {params.accession}
	mv {params.accession}_1.fastq.gz {output.f}
	mv {params.accession}_2.fastq.gz {output.r}
	"""


rule trimmomatic:
    input:
        f = rules.fastqdump.output.f,
        r = rules.fastqdump.output.r
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="trimmomatic",
        nnode="-N 1"
    output:
        fout = "trimmed/{id}_1P_trim.fastq.gz",
        funp = "trimmed/{id}_1P_unpaired.fastq.gz",
        rout = "trimmed/{id}_2P_trim.fastq.gz",
        runp = "trimmed/{id}_2P_unpaired.fastq.gz",
        ok = "trimmed/trim_{id}.ok"
    threads: 24
    conda:
        "envs/trimmomatic.yml"
    shell:
        """
        trimmomatic PE -threads {threads} {input.f} {input.r} {output.fout} {output.funp} {output.rout} {output.runp} ILLUMINACLIP:adapterseq/Adapters_PE.fa:2:30:10: LEADING:30 TRAILING:30 SLIDINGWINDOW:4:15 MINLEN:80
        touch {output.ok}
        """

rule subsample:
    input:
        f = rules.trimmomatic.output.fout,
        r = rules.trimmomatic.output.rout
    output:
        f = "sub/{sub}/{id}_1.fastq.gz",
        r = "sub/{sub}/{id}_2.fastq.gz"
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="subsample",
        nnode="-N 1"
    params: 
        seed=553353,
    threads: 24
    conda:
        "envs/seqtk.yml"
    shell:
        """
        seqtk sample -s{params.seed} {input.f} {wildcards.sub} | gzip > {output.f}
        seqtk sample -s{params.seed} {input.r} {wildcards.sub} | gzip > {output.r}
        """

rule norgal:
    input:
        f = rules.subsample.output.f,
        r = rules.subsample.output.r
    output:
        directory("assemblies/{assembler}/{id}/{sub}/{id}_{assembler}"),
#        ok = assemblies/{assembler}/{id}/{sub}/{id}_{assembler}/norgal.ok
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="norgal",
        nnode="-N 1"
    threads: 24
    shell:
        """
        module load intel/18 intel-mkl/2018 python/2.7 numpy/1.12.0 matplotlib/2.2.2
        export PATH="/home/lv71312/leeming/mt_assembly/norgal/binaries/linux:$PATH"        
        python /home/lv71312/leeming/mt_assembly/norgal/norgal.py -i {input.f} {input.r} -o {output} --blast -t {threads}
        touch {output}
        """


#rule download_GO_database:
#    output:
#       "get_organelle.db.ok"
#    conda:
#       "envs/getorganelle.yml" 
#    threads: 1
#    shell:
#       """
#       get_organelle_config.py --clean
#       get_organelle_config.py -a animal_mt
#       touch {output}
#       """


rule get_organelle:
    input:
#        ok = rules.download_GO_database.output,
        f = rules.subsample.output.f,
        r = rules.subsample.output.r
    output:
        fasta = "assemblies/{assembler}/{id}/{sub}/{id}.getorganelle.final.fasta",
        ok = "assemblies/{assembler}/{id}/{sub}/get_organelle.ok"
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="getorganelle",
        nnode="-N 1"
    params:
        outdir = "assemblies/{assembler}/{id}/{sub}",
        seed = get_seed
    singularity:"docker://reslp/getorganelle:1.7.1"
#    conda:
#        "envs/getorganelle.yml"
    log:
        "assemblies/{assembler}/{id}/{sub}/{assembler}_log_{id}_{sub}.log"
    threads: 24
    shell:
        """
        get_organelle_from_reads.py -1 {input.f} -2 {input.r} -o {params.outdir} -F animal_mt -t {threads} -R 10 -s {params.seed}
        #get the path to the one fasta file in the output directory (assumes there is only one)
        final_fasta=$(ls $(pwd)/{params.outdir}/*.fasta)
        #create a symbolic link between the final fasta file and the output file as specified in the rule above
        ln -s $final_fasta $(pwd)/{output.fasta}
        touch {output.ok}
        """

rule setup_mitoflex_db:
    output: 
        ok = "bin/MitoFlex/mitoflex.db.status.ok",
    params:
        wd = os.getcwd(),
    singularity: "docker://samlmg/mitoflex:v0.2.9"
    threads: 1
    shell:
        """
        cp -pfr /MitoFlex/* bin/MitoFlex/
	cp bin/ncbi_custom.py bin/MitoFlex/ncbi.py
	cd bin/MitoFlex/
	export HOME=$(pwd)
	echo $HOME
        ./ncbi.py n
        touch {params.wd}/{output.ok}
        """

rule mitoflex:
    input:
        f = rules.subsample.output.f,
        r = rules.subsample.output.r,
        db = rules.setup_mitoflex_db.output
    output:
        fasta = "assemblies/{assembler}/{id}/{sub}/{id}.picked.fa",
        ok = "assemblies/{assembler}/{id}/{sub}/mitoflex.ok",
	run = directory("assemblies/{assembler}/{id}/{sub}/MitoFlex")
    params:
        wd = os.getcwd(),
	outdir = "assemblies/{assembler}/{id}/{sub}",
        id = "{id}",
        clade = get_clade,
        genetic_code = get_code 
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        ntasks="24",
        name="MitoFlex",
        nnode="-N 1",
    log:
        stdout = "assemblies/{assembler}/{id}/{sub}/stdout.txt",
        stderr = "assemblies/{assembler}/{id}/{sub}/stderr.txt"
    threads: 24
    singularity: "docker://samlmg/mitoflex:v0.2.9"
#    shadow: "minimal"
    shell:
        """
        cd {params.outdir}
	export HOME="{params.wd}/bin/MitoFlex"
        {params.wd}/bin/MitoFlex/MitoFlex.py all --workname MitoFlex --threads {threads} --insert-size 167 --fastq1 {params.wd}/{input.f} --fastq2 {params.wd}/{input.r} --genetic-code {params.genetic_code} --clade {params.clade} 1> {params.wd}/{log.stdout} 2> {params.wd}/{log.stderr} 
        touch {params.wd}/{output.ok}
        cp $(find ./ -name "*.picked.fa") {output.fasta}
        """

rule NOVOconfig:
    input:
        "bin/NOVOconfig.txt"
    output:
        "assemblies/Novoplasty/{id}/{sub}/NOVOconfig_{id}_{sub}.txt"
    params:
        project_name = "{id}",
        seed = get_seed,
        log = "assemblies/Novoplasty/{id}/{sub}/NOVOconfig_{id}_{sub}_log.txt",
        f = rules.subsample.output.f,
        r = rules.subsample.output.r
    shell:
        """
        cp {input} {output}
        sed -i 's?^Project name.*?Project name = {params.project_name}?g' {output}
        sed -i 's?^Seed Input.*?Seed Input = {params.seed}?g' {output}
        sed -i 's?^Extended log.*?Extended log = {params.log}?g' {output}
        sed -i 's?^Forward reads.*?Forward reads = {params.f}?g' {output}
        sed -i 's?^Reverse reads.*?Reverse reads = {params.r}?g' {output}
        """        


rule NOVOplasty:
    input:
       config = rules.NOVOconfig.output,
       ok = rules.subsample.output.f
    output: 
       fasta = "assemblies/{assembler}/{id}/{sub}/Circularized_assembly_1_{id}_{sub}_novoplasty.fasta",
       ok = "assemblies/{assembler}/{id}/{sub}/NOVOplasty.ok"
    params:
       outdir = "assemblies/{assembler}/{id}/{sub}"
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="NOVOplasty",
        nnode="-N 1"
    log: "assemblies/{assembler}/{id}/{sub}/{id}_{assembler}_{sub}.log"
    threads: 24
    shadow: "shallow"
    conda:
       "envs/novoplasty.yml"
    shell:
       """
       scripts/NOVOPlasty4.2.1.pl -c {input.config}
       cp $(find ./ -name "*.fasta") {params.outdir}
       touch {output.ok}
       """

rule interleave:
    input:
        f = rules.subsample.output.f,
        r = rules.subsample.output.r,
    resources:
        qos="normal_0064",
        partition="mem_0064",
        mem="10G",
        name="interleave",
        nnode="-N 1"
    threads: 2
    output:
        "interleave/{sub}/{id}_interleaved.fastq"
    conda:
        "envs/bbmap.yml"
    shell:
        "reformat.sh in1={input.f} in2={input.r} out={output}"


rule MITObim:
    input:
        rules.interleave.output
    output:
        fasta = "assemblies/{assembler}/{id}/{sub}/{id}_{assembler}_coxI.fasta",
        ok = "assemblies/{assembler}/{id}/{sub}/MITObim.ok"
    resources:
        qos="normal_binf -C binf",
        partition="binf",
        mem="100G",
        name="MITObim",
        nnode="-N 1"
    params:
        id = "{id}",
        assembler = "{assembler}",
        seed = get_seed,
        wd = os.getcwd()
    log: "assemblies/{assembler}/{id}/{sub}/{id}_{assembler}_{sub}.log"
    singularity:
        "docker://chrishah/mitobim:v.1.9.1"
    shadow: "shallow"
    threads: 10
    shell:
        """
        MITObim.pl -sample {params.id} -ref {params.id}_coxI -readpool {input} --quick {params.seed} -end 100 --paired --clean --NFS_warn_only &> {log}
        cp $(find ./ -name "*noIUPAC.fasta") {output.fasta}
        touch {output.ok}       
        """ 

rule quast:
    input:
        norgal = expand("assemblies/{assembler}/{id}/{sub}/{id}_{assembler}", sub=sub, id = IDS,  assembler = Assembler[0]),
#        norgal = rules.norgal.output,
        MitoFlex = expand("assemblies/{assembler}/{id}/{sub}/{id}.picked.fa", sub=sub, id = IDS, assembler = Assembler[1]),
#        Mitoflex = rules.mitoflex.output.fasta,
        GetOrganelle = expand("assemblies/{assembler}/{id}/{sub}/{id}.getorganelle.final.fasta", sub=sub, id = IDS, assembler = Assembler[2]),
#        GetOrganelle = rules.get_organelle.output,
        Novoplasty = expand("assemblies/{assembler}/{id}/{sub}/Circularized_assembly_1_{id}_{sub}_novoplasty.fasta", sub=sub, id = IDS, assembler = Assembler[3]),
#        Novoplasty = rules.NOVOplasty.output,
        MITObim = expand("assemblies/{assembler}/{id}/{sub}/{id}_{assembler}_coxI.fasta", sub=sub, id = IDS, assembler = Assembler[4])
#        MITObim = rules.MITObim.output
    output:
        "QUAST/report.tsv"
    params:
        outdir = "QUAST/",
    conda:
        "envs/quast.yml"
    threads: 1
    shell:
        "quast -o {params.outdir} {input}"
